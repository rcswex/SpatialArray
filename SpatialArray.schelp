TITLE:: SpatialArray
summary:: A container supporting intuitive value swapping
categories:: Collections>Dictionaries
related:: Classes/Dictionary, Classes/IdentityDictionary, Classes/Event

DESCRIPTION::
SpatialArray is a dictionary-like container with specialized support for variable swapping operations. It models the intuitive way we exchange objects in the physical world, where we can swap two items without needing a temporary location.

In traditional programming:
code::
// With regular variables
~a = 5;
~b = 10;
~temp = ~a;  // Temporary variable needed
~a = ~b;
~b = ~temp;
::

With SpatialArray:
code::
~arr = SpatialArray.new;
~arr.put(\a, 5);
~arr.put(\b, 10);
~arr.swap(\a, \b);  // Direct swap without temporary variable
::

While regular Dictionary objects require a temporary variable for swapping, SpatialArray provides an optimized swap operation that more closely models physical world exchanges.

CLASSMETHODS::

METHOD:: new
Creates a new SpatialArray instance.

code::
~arr = SpatialArray.new;
::

INSTANCEMETHODS::

METHOD:: put
Stores a value at the specified key. Creates the key if it doesn't exist, or updates it if it does.

ARGUMENT:: key
The key, typically a Symbol.

ARGUMENT:: value
The value to store.

code::
~arr.put(\a, 5);
::

METHOD:: createVariable
An alias for put, maintaining backward compatibility.

ARGUMENT:: key
The variable name.

ARGUMENT:: value
The value to store.

code::
~arr.createVariable(\a, 5);
::

METHOD:: at
Retrieves the value at the specified key.

ARGUMENT:: key
The key to look up.

returns:: The value associated with the key.

code::
~arr.at(\a);
::

METHOD:: getValue
An alias for at, maintaining backward compatibility.

ARGUMENT:: key
The key to look up.

returns:: The value associated with the key.

code::
~arr.getValue(\a);
::

METHOD:: setValue
An alias for put, maintaining backward compatibility.

ARGUMENT:: key
The key to update.

ARGUMENT:: value
The new value.

code::
~arr.setValue(\a, 10);
::

METHOD:: swap
Exchanges the values of two keys.

ARGUMENT:: key1
The first key.

ARGUMENT:: key2
The second key.

code::
~arr.swap(\a, \b);
::

METHOD:: debug
Prints the contents of the SpatialArray for inspection.

code::
~arr.debug;
::

METHOD:: size
Returns the number of key-value pairs in the collection.

returns:: An Integer.

METHOD:: isEmpty
Returns whether the collection is empty.

returns:: A Boolean.

METHOD:: keys
Returns all keys in the collection.

returns:: A Set of keys.

METHOD:: values
Returns all values in the collection.

returns:: An Array of values.

METHOD:: includes
Checks if the collection contains a specific value.

ARGUMENT:: value
The value to search for.

returns:: A Boolean.

METHOD:: includesKey
Checks if the collection contains a specific key.

ARGUMENT:: key
The key to check for.

returns:: A Boolean.

METHOD:: do
Iterates over all values in the collection.

ARGUMENT:: function
A function to execute for each value.

METHOD:: keysValuesDo
Iterates over all key-value pairs in the collection.

ARGUMENT:: function
A function to execute for each key-value pair.

METHOD:: asArray
Converts the collection to an Array of key-value pairs.

returns:: An Array.

METHOD:: asList
Converts the collection to a List of key-value pairs.

returns:: A List.

METHOD:: asDict
Returns a copy of the internal dictionary.

returns:: An IdentityDictionary.

EXAMPLES::

Basic usage:

code::
// Create a new spatial array
~arr = SpatialArray.new;

// Add variables
~arr.put(\a, 5);
~arr.put(\b, 10);

// Access values
~arr.at(\a).postln;  // Outputs 5
~arr.at(\b).postln;  // Outputs 10

// Swap values
~arr.swap(\a, \b);

// Verify swap
~arr.at(\a).postln;  // Now outputs 10
~arr.at(\b).postln;  // Now outputs 5

// Using collection interface
~arr.size.postln;    // Outputs 2
~arr.keys.postln;    // Outputs Set[ \a, \b ]
~arr.values.postln;  // Outputs [ 10, 5 ]

// Iteration
~arr.keysValuesDo { |k, v| 
    "% -> %".format(k, v).postln;
};
::

Swapping complex objects:

code::
// Define a simple Fruit class
Fruit = {
    var <>name, <>color, <>weight;
    
    *new { |name, color, weight|
        ^super.new.init(name, color, weight);
    }
    
    init { |argName, argColor, argWeight|
        name = argName;
        color = argColor;
        weight = argWeight;
    }
    
    asString {
        ^"%(%, %kg)".format(name, color, weight);
    }
    
    printOn { |stream|
        stream << this.asString;
    }
};

// Create fruit objects
~apple = Fruit.new("apple", "red", 0.2);
~banana = Fruit.new("banana", "yellow", 0.15);

// Put them in a spatial array
~basket = SpatialArray.new;
~basket.put(\left, ~apple);
~basket.put(\right, ~banana);

// Display initial state
~basket.at(\left).postln;   // apple(red, 0.2kg)
~basket.at(\right).postln;  // banana(yellow, 0.15kg)

// Swap fruits
~basket.swap(\left, \right);

// Display result
~basket.at(\left).postln;   // Now banana(yellow, 0.15kg)
~basket.at(\right).postln;  // Now apple(red, 0.2kg)
::

Audio synthesis example:

code::
// Store synthesis parameters
~synthParams = SpatialArray.new;
~synthParams.put(\sine, (freq: 440, amp: 0.5));
~synthParams.put(\saw, (freq: 220, amp: 0.3));

// Create synths
s.waitForBoot({
    SynthDef(\test, { |freq=440, amp=0.5|
        var sig = SinOsc.ar(freq) * amp;
        Out.ar(0, sig ! 2);
    }).store;
    
    // Use parameters from spatial array
    ~sineParams = ~synthParams.at(\sine);
    ~sineInstance = Synth(\test, [\freq, ~sineParams.freq, \amp, ~sineParams.amp]);
    
    // Swap parameters and create a new synth after 2 seconds
    SystemClock.sched(2, {
        ~synthParams.swap(\sine, \saw);
        ~sineInstance.free;
        
        // Get the swapped parameters
        ~newParams = ~synthParams.at(\sine);
        ~sineInstance = Synth(\test, [\freq, ~newParams.freq, \amp, ~newParams.amp]);
        
        SystemClock.sched(2, {
            ~sineInstance.free;
            nil;
        });
        
        nil;
    });
});
::